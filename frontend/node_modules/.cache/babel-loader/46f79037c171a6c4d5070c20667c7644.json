{"ast":null,"code":"export class Card {\n  /*** Representation ***/\n\n  /** \n   * AF(width, height, loc) =\n   * \n   * Representation Invariant\n   * \n   * Representation Exposure\n   * \n   */\n  constructor(width, height, left, right) {\n    this.width = width;\n    this.height = height;\n    this.loc = void 0;\n    this.loc = {\n      left: left,\n      right: right\n    };\n  }\n  /**\n   * Sets the location of the card\n   * \n   * @param left the bottom left (x, y) coordinates of the card\n   * @param right the bottom right (x, y) coordinates of the card\n   */\n\n\n  setLocation(left, right) {\n    this.loc = {\n      left: left,\n      right: right\n    };\n  }\n  /**\n   * @returns the rotation angle of the block when placed at loc\n   */\n\n\n  angle() {\n    console.log(Math.abs(this.loc.left.y - this.loc.right.y) / this.width);\n    return Math.asin(Math.abs(this.loc.left.y - this.loc.right.y) / this.width);\n  }\n\n}\nexport class CardBucket2D {\n  /*** Representation ***/\n\n  /** \n   * AF(cards) =\n   * \n   * Representation Invariant\n   * \n   * Representation Exposure\n   * \n   */\n  constructor(size) {\n    this.size = size;\n    this.cards = [];\n  }\n  /** @inheritdoc */\n\n\n  drop(card) {\n    const cardW = card.width;\n    const n = Math.random() * this.size.width;\n\n    const left = this._firstEncounter(n - cardW / 2);\n\n    const right = this._firstEncounter(n + cardW / 2);\n\n    card.setLocation(left, right);\n    this.cards.push(card);\n  }\n  /**\n   * Finds the card which a dropping card would encounter first as it falls\n   * \n   * @param x the x coordinate to consider\n   * @returns the (x, y) coordinate of where the first encountered card is located\n   */\n\n\n  _firstEncounter(x) {\n    let y = 0;\n\n    for (const currCard of this.cards) {\n      if (currCard.loc.left.x <= x && x <= currCard.loc.right.x) {\n        const currentY = Math.max(currCard.loc.left.y, currCard.loc.right.y) + currCard.height;\n        if (currentY > y) y = currentY;\n      }\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/king_ahmed1421/Simba/Ahmed/frontend/src/gallery/utils.ts"],"names":["Card","constructor","width","height","left","right","loc","setLocation","angle","console","log","Math","abs","y","asin","CardBucket2D","size","cards","drop","card","cardW","n","random","_firstEncounter","push","x","currCard","currentY","max"],"mappings":"AAeA,OAAO,MAAMA,IAAN,CAAW;AACd;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEIC,EAAAA,WAAW,CAAUC,KAAV,EAAkCC,MAAlC,EACCC,IADD,EAC+BC,KAD/B,EAC8D;AAAA,SADpDH,KACoD,GADpDA,KACoD;AAAA,SAD5BC,MAC4B,GAD5BA,MAC4B;AAAA,SAZlEG,GAYkE;AACrE,SAAKA,GAAL,GAAW;AAACF,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,KAAK,EAAEA;AAApB,KAAX;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWE,EAAAA,WAAW,CAACH,IAAD,EAA+BC,KAA/B,EAAoE;AAAC,SAAKC,GAAL,GAAW;AAACF,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,KAAK,EAAEA;AAApB,KAAX;AAAuC;AAE9H;AACJ;AACA;;;AACWG,EAAAA,KAAK,GAAW;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,GAAL,CAAS,KAAKN,GAAL,CAASF,IAAT,CAAcS,CAAd,GAAkB,KAAKP,GAAL,CAASD,KAAT,CAAeQ,CAA1C,IAA+C,KAAKX,KAAhE;AACA,WAAOS,IAAI,CAACG,IAAL,CAAUH,IAAI,CAACC,GAAL,CAAS,KAAKN,GAAL,CAASF,IAAT,CAAcS,CAAd,GAAkB,KAAKP,GAAL,CAASD,KAAT,CAAeQ,CAA1C,IAA+C,KAAKX,KAA9D,CAAP;AAA6E;;AA/BnE;AAkClB,OAAO,MAAMa,YAAN,CAAyC;AAC5C;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEId,EAAAA,WAAW,CAAUe,IAAV,EAAiD;AAAA,SAAvCA,IAAuC,GAAvCA,IAAuC;AAAA,SAXnDC,KAWmD,GAXnC,EAWmC;AAAE;AAE9D;;;AACOC,EAAAA,IAAI,CAACC,IAAD,EAAmB;AAC1B,UAAMC,KAAa,GAAGD,IAAI,CAACjB,KAA3B;AACA,UAAMmB,CAAS,GAAGV,IAAI,CAACW,MAAL,KAAgB,KAAKN,IAAL,CAAUd,KAA5C;;AAEA,UAAME,IAAI,GAAG,KAAKmB,eAAL,CAAqBF,CAAC,GAAGD,KAAK,GAAG,CAAjC,CAAb;;AACA,UAAMf,KAAK,GAAG,KAAKkB,eAAL,CAAqBF,CAAC,GAAGD,KAAK,GAAG,CAAjC,CAAd;;AACAD,IAAAA,IAAI,CAACZ,WAAL,CAAiBH,IAAjB,EAAuBC,KAAvB;AAEA,SAAKY,KAAL,CAAWO,IAAX,CAAgBL,IAAhB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACYI,EAAAA,eAAe,CAACE,CAAD,EAAoC;AACvD,QAAIZ,CAAC,GAAG,CAAR;;AACA,SAAK,MAAMa,QAAX,IAAuB,KAAKT,KAA5B,EAAmC;AAC/B,UAAIS,QAAQ,CAACpB,GAAT,CAAaF,IAAb,CAAkBqB,CAAlB,IAAuBA,CAAvB,IAA4BA,CAAC,IAAIC,QAAQ,CAACpB,GAAT,CAAaD,KAAb,CAAmBoB,CAAxD,EAA2D;AACvD,cAAME,QAAQ,GAAGhB,IAAI,CAACiB,GAAL,CAASF,QAAQ,CAACpB,GAAT,CAAaF,IAAb,CAAkBS,CAA3B,EAA8Ba,QAAQ,CAACpB,GAAT,CAAaD,KAAb,CAAmBQ,CAAjD,IAAsDa,QAAQ,CAACvB,MAAhF;AACA,YAAIwB,QAAQ,GAAGd,CAAf,EAAkBA,CAAC,GAAGc,QAAJ;AACrB;AACJ;;AACD,WAAO;AAACF,MAAAA,CAAC,EAAEA,CAAJ;AAAOZ,MAAAA,CAAC,EAAEA;AAAV,KAAP;AACH;;AA1C2C","sourcesContent":["interface CardBucket {\n    /*** Required Representation ***/\n    \n    readonly cards: Array<Card>;\n    readonly size: {width: number, height: number};\n\n    /**\n     * Drops a card into the bucket such that the droped card is either on the floor\n     * of the bucket or is adjacent but not overlapping another card\n     * \n     * @param card to drop into the bucket, must be smaller in size than the bucket\n     */\n    drop(card: Card): void;\n}\n\nexport class Card {\n    /*** Representation ***/\n    public loc: {left: {x: number, y: number}, right: {x: number, y: number}};\n\n    /** \n     * AF(width, height, loc) =\n     * \n     * Representation Invariant\n     * \n     * Representation Exposure\n     * \n     */\n\n    constructor(readonly width: number, readonly height: number, \n                left: {x: number, y: number}, right: {x: number, y: number}) {\n        this.loc = {left: left, right: right};\n    }\n\n    /**\n     * Sets the location of the card\n     * \n     * @param left the bottom left (x, y) coordinates of the card\n     * @param right the bottom right (x, y) coordinates of the card\n     */\n    public setLocation(left: {x: number, y: number}, right: {x: number, y: number}): void {this.loc = {left: left, right: right};}\n\n    /**\n     * @returns the rotation angle of the block when placed at loc\n     */\n    public angle(): number {\n        console.log(Math.abs(this.loc.left.y - this.loc.right.y) / this.width);\n        return Math.asin(Math.abs(this.loc.left.y - this.loc.right.y) / this.width);}\n}\n\nexport class CardBucket2D implements CardBucket {\n    /*** Representation ***/\n    readonly cards: Card[] = [];\n\n    /** \n     * AF(cards) =\n     * \n     * Representation Invariant\n     * \n     * Representation Exposure\n     * \n     */\n\n    constructor(readonly size: {width: number, height: number}) {}\n\n    /** @inheritdoc */\n    public drop(card: Card): void {\n        const cardW: number = card.width;\n        const n: number = Math.random() * this.size.width;\n        \n        const left = this._firstEncounter(n - cardW / 2);\n        const right = this._firstEncounter(n + cardW / 2);\n        card.setLocation(left, right);\n\n        this.cards.push(card);\n    }\n\n    /**\n     * Finds the card which a dropping card would encounter first as it falls\n     * \n     * @param x the x coordinate to consider\n     * @returns the (x, y) coordinate of where the first encountered card is located\n     */\n    private _firstEncounter(x: number): {x: number, y: number} {\n        let y = 0;\n        for (const currCard of this.cards) {\n            if (currCard.loc.left.x <= x && x <= currCard.loc.right.x) {\n                const currentY = Math.max(currCard.loc.left.y, currCard.loc.right.y) + currCard.height;\n                if (currentY > y) y = currentY;\n            }\n        }\n        return {x: x, y: y};\n    }\n}"]},"metadata":{},"sourceType":"module"}